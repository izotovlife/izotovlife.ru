# backend/news/models.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ú–æ–¥–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ RSS.
# –û–±–Ω–æ–≤–ª–µ–Ω–æ:
#   - –í Article –∏ ImportedNews –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ type —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ ("article" / "rss")
#   - –í Article –Ω–µ—Ç –ø–æ–ª—è summary ‚Üí –µ–≥–æ –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
#   - –í ImportedNews summary —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ

import uuid
from django.db import models
from django.conf import settings
from django.utils.text import slugify
from unidecode import unidecode


class Category(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", max_length=255, unique=True)
    slug = models.SlugField("–°–ª–∞–≥", max_length=255, unique=True, blank=True)
    popularity = models.PositiveIntegerField("–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", default=0)

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(unidecode(self.name))
            new_slug = base_slug
            counter = 1
            while Category.objects.exclude(id=self.id).filter(slug=new_slug).exists():
                new_slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = new_slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class Article(models.Model):
    class Status(models.TextChoices):
        DRAFT = "DRAFT", "–ß–µ—Ä–Ω–æ–≤–∏–∫"
        PENDING = "PENDING", "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        NEEDS_REVISION = "NEEDS_REVISION", "–ù—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞"
        PUBLISHED = "PUBLISHED", "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"

    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=300)
    slug = models.SlugField("–°–ª–∞–≥", max_length=360, unique=True, blank=True)
    content = models.TextField("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ")  # HTML –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    categories = models.ManyToManyField(Category, blank=True, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=Status.choices, default=Status.DRAFT)
    editor_notes = models.TextField("–ó–∞–º–µ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", blank=True, default="")
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    published_at = models.DateTimeField("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", null=True, blank=True)
    cover_image = models.ImageField("–û–±–ª–æ–∂–∫–∞", upload_to="articles/", blank=True, null=True)
    archived_at = models.DateTimeField("–í –∞—Ä—Ö–∏–≤–µ —Å", null=True, blank=True)

    # ‚ö° –ù–æ–≤–æ–µ –ø–æ–ª–µ
    type = models.CharField(
        max_length=20,
        default="article",
        editable=False,
        help_text="–¢–∏–ø –∑–∞–ø–∏—Å–∏ (article)"
    )

    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(self.title)[:50] or str(uuid.uuid4())[:8]
            new_slug = base_slug
            counter = 1
            while Article.objects.filter(slug=new_slug).exists():
                new_slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = new_slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    @property
    def is_archived(self):
        return self.archived_at is not None


class NewsSource(models.Model):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏, –¢–ê–°–°)."""
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞", max_length=255, unique=True)
    slug = models.SlugField("–°–ª–∞–≥", max_length=255, blank=True, null=True, unique=False)  # üîπ –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ unique
    logo = models.ImageField("–õ–æ–≥–æ—Ç–∏–ø", upload_to="sources/", blank=True, null=True)

    class Meta:
        verbose_name = "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"
        verbose_name_plural = "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"

    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(unidecode(self.name))
            new_slug = base_slug
            counter = 1
            while NewsSource.objects.exclude(id=self.id).filter(slug=new_slug).exists():
                new_slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = new_slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class ImportedNews(models.Model):
    source_fk = models.ForeignKey(
        NewsSource, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫"
    )
    link = models.URLField("–°—Å—ã–ª–∫–∞", unique=True)
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=500)
    summary = models.TextField("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", blank=True, default="")
    image = models.URLField("–ö–∞—Ä—Ç–∏–Ω–∫–∞", blank=True, default="")
    published_at = models.DateTimeField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", null=True, blank=True)
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    feed_url = models.URLField("–ò—Å—Ç–æ—á–Ω–∏–∫ RSS", blank=True, default="")
    archived_at = models.DateTimeField("–í –∞—Ä—Ö–∏–≤–µ —Å", null=True, blank=True)

    # ‚ö° –ù–æ–≤–æ–µ –ø–æ–ª–µ
    type = models.CharField(
        max_length=20,
        default="rss",
        editable=False,
        help_text="–¢–∏–ø –∑–∞–ø–∏—Å–∏ (rss)"
    )

    class Meta:
        ordering = ["-published_at", "-created_at"]
        verbose_name = "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å"
        verbose_name_plural = "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"

    def __str__(self):
        return f"{self.source_fk}: {self.title[:60]}"

    @property
    def is_archived(self):
        return self.archived_at is not None
