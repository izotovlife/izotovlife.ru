# –ü—É—Ç—å: backend/news/management/commands/rebuild_indexes.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: Django-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö GIN-–∏–Ω–¥–µ–∫—Å–æ–≤ –≤ PostgreSQL.
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—è title, content (Article) –∏ summary (ImportedNews).
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python manage.py rebuild_indexes
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî CREATE INDEX CONCURRENTLY –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã.

from django.core.management.base import BaseCommand
from django.db import connection

SQL_INDEXES = [
    # --- –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏ ---
    {
        "name": "news_article_title_idx",
        "table": "news_article",
        "vector": "to_tsvector('russian', coalesce(title, ''))",
        "description": "–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å—Ç–∞—Ç–µ–π",
    },
    {
        "name": "news_article_content_idx",
        "table": "news_article",
        "vector": "to_tsvector('russian', coalesce(content, ''))",
        "description": "–ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç–∞—Ç–µ–π",
    },
    # --- –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
    {
        "name": "news_importednews_title_idx",
        "table": "news_importednews",
        "vector": "to_tsvector('russian', coalesce(title, ''))",
        "description": "–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
    },
    {
        "name": "news_importednews_summary_idx",
        "table": "news_importednews",
        "vector": "to_tsvector('russian', coalesce(summary, ''))",
        "description": "–ø–æ –∫—Ä–∞—Ç–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
    },
]


class Command(BaseCommand):
    help = "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ GIN-–∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π Article –∏ ImportedNews (PostgreSQL)."

    def handle(self, *args, **options):
        self.stdout.write(self.style.HTTP_INFO("üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤..."))
        with connection.cursor() as cursor:
            for index in SQL_INDEXES:
                name = index["name"]
                table = index["table"]
                vector = index["vector"]
                desc = index["description"]

                self.stdout.write(self.style.WARNING(f"–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ {name} ({desc})..."))
                cursor.execute(f"DROP INDEX IF EXISTS {name};")

                self.stdout.write(self.style.HTTP_INFO(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ {name} –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ {table}..."))
                cursor.execute(
                    f"CREATE INDEX CONCURRENTLY IF NOT EXISTS {name} "
                    f"ON {table} USING gin ({vector});"
                )

                self.stdout.write(self.style.SUCCESS(f"‚úÖ –ò–Ω–¥–µ–∫—Å {name} ({desc}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."))

        self.stdout.write(self.style.SUCCESS("üéØ –í—Å–µ GIN-–∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!"))
