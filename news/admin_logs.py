# –ü—É—Ç—å: backend/news/admin_logs.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ (NewsResolverLog –∏ RSSImportLog).
# –§–∏—à–∫–∏:
#   ‚úÖ –¶–≤–µ—Ç–Ω—ã–µ –±–µ–π–¥–∂–∏ —É—Ä–æ–≤–Ω–µ–π (INFO, WARNING, ERROR).
#   ‚úÖ –ü–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.
#   ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ: "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (30 –¥–Ω–µ–π)".
#   ‚úÖ –ö–Ω–æ–ø–∫–∞ "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏" –ø—Ä—è–º–æ –≤ –∞–¥–º–∏–Ω–∫–µ.
#   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Django 5+.

from datetime import timedelta
from django.contrib import admin, messages
from django.utils import timezone
from django.utils.html import format_html
from django.urls import path
from django.shortcuts import redirect

from .models_logs import NewsResolverLog, RSSImportLog


# ==========================
# –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –õ–û–ì–û–í
# ==========================
def clear_old_logs(modeladmin, request, queryset):
    """–£–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π."""
    days = 30
    threshold = timezone.now() - timedelta(days=days)
    model = modeladmin.model
    old_logs = model.objects.filter(created_at__lt=threshold)
    count = old_logs.count()
    old_logs.delete()
    modeladmin.message_user(
        request,
        f"–£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {model.__name__} (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π).",
    )


clear_old_logs.short_description = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π"


# ==========================
# RSS IMPORT LOG ADMIN
# ==========================
@admin.register(RSSImportLog)
class RSSImportLogAdmin(admin.ModelAdmin):
    list_display = ("created_at", "colored_level", "source_name", "short_message")
    list_filter = ("level", "source_name")
    search_fields = ("message", "source_name")
    readonly_fields = ("created_at", "source_name", "message", "level")
    actions = [clear_old_logs]

    def colored_level(self, obj):
        colors = {"INFO": "green", "WARNING": "orange", "ERROR": "red"}
        color = colors.get(obj.level, "gray")
        return format_html(f'<b style="color:{color}">{obj.level}</b>')
    colored_level.short_description = "–£—Ä–æ–≤–µ–Ω—å"

    def short_message(self, obj):
        return (obj.message[:100] + "‚Ä¶") if len(obj.message) > 100 else obj.message
    short_message.short_description = "–°–æ–æ–±—â–µ–Ω–∏–µ"

    # ===== –ö–Ω–æ–ø–∫–∞ ‚Äú–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏‚Äù =====
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                "clear-all/",
                self.admin_site.admin_view(self.clear_all_logs),
                name="rssimportlog_clear_all",
            ),
        ]
        return custom_urls + urls

    def clear_all_logs(self, request):
        count, _ = RSSImportLog.objects.all().delete()
        messages.success(request, f"–£–¥–∞–ª–µ–Ω–æ {count} –ª–æ–≥–æ–≤ –∏–∑ RSSImportLog.")
        return redirect("..")

    def changelist_view(self, request, extra_context=None):
        extra_context = extra_context or {}
        extra_context["custom_button_label"] = "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏"
        extra_context["custom_button_url"] = "clear-all/"
        return super().changelist_view(request, extra_context=extra_context)

    class Media:
        js = ["admin/custom_admin_button.js"]


# ==========================
# NEWS RESOLVER LOG ADMIN
# ==========================
@admin.register(NewsResolverLog)
class NewsResolverLogAdmin(admin.ModelAdmin):
    list_display = ("created_at", "colored_level", "slug", "short_message")
    list_filter = ("level", "created_at")
    search_fields = ("slug", "message")
    ordering = ("-created_at",)
    actions = [clear_old_logs]
    readonly_fields = ("created_at", "slug", "level", "message")

    def colored_level(self, obj):
        colors = {"INFO": "green", "WARNING": "orange", "ERROR": "red"}
        color = colors.get(obj.level, "gray")
        return format_html(f'<b style="color:{color}">{obj.level}</b>')
    colored_level.short_description = "–£—Ä–æ–≤–µ–Ω—å"

    def short_message(self, obj):
        return (obj.message[:80] + "‚Ä¶") if len(obj.message) > 80 else obj.message
    short_message.short_description = "–°–æ–æ–±—â–µ–Ω–∏–µ"

    # ===== –ö–Ω–æ–ø–∫–∞ ‚Äú–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏‚Äù =====
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                "clear-all/",
                self.admin_site.admin_view(self.clear_all_logs),
                name="newsresolverlog_clear_all",
            ),
        ]
        return custom_urls + urls

    def clear_all_logs(self, request):
        count, _ = NewsResolverLog.objects.all().delete()
        messages.success(request, f"–£–¥–∞–ª–µ–Ω–æ {count} –ª–æ–≥–æ–≤ –∏–∑ NewsResolverLog.")
        return redirect("..")

    def changelist_view(self, request, extra_context=None):
        extra_context = extra_context or {}
        extra_context["custom_button_label"] = "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏"
        extra_context["custom_button_url"] = "clear-all/"
        return super().changelist_view(request, extra_context=extra_context)

    class Media:
        js = ["admin/custom_admin_button.js"]
