// –ü—É—Ç—å: frontend/src/components/OptimizedCardImage.jsx
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ë—ã—Å—Ç—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ª–µ–Ω—Ç—ã (–º–∏–Ω–∏–∞—Ç—é—Ä—ã —á–µ—Ä–µ–∑ /api/media/thumbnail/ —Å —Ñ–æ–ª–±—ç–∫–æ–º).
// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–∏—á–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ):
//   ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ <img> –ø—Ä–∏ –æ—à–∏–±–∫–µ (—á—Ç–æ–±—ã –∞–ª—å—Ç-—Ç–µ–∫—Å—Ç –Ω–µ ¬´–≤—ã–ø—Ä—ã–≥–∏–≤–∞–ª¬ª –¥–∞–∂–µ –Ω–∞ –¥–æ–ª—é —Å–µ–∫—É–Ω–¥—ã).
//   ‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–ø hideOnError (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true); –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è thumb ‚Üí original ‚Üí placeholder —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.
//   ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: eager, preconnect –∫ —Ö–æ—Å—Ç—É —Ä–µ—Å–∞–π–∑–µ—Ä–∞, —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, srcset/sizes.

import React, { useEffect, useMemo, useRef, useState, useCallback } from "react";
import { thumbUrl } from "../utils/thumb";

const PLACEHOLDER =
  "data:image/svg+xml;utf8," +
  encodeURIComponent(
    '<svg xmlns="http://www.w3.org/2000/svg" width="640" height="360"><rect width="100%" height="100%" fill="#0b0d11"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="#5a6b84" font-family="Arial" font-size="16">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</text></svg>'
  );

const DEFAULT_TIMEOUT = 2000;
const EAGER_TIMEOUT = 800;

function ensurePreconnect(url) {
  try {
    const u = new URL(url);
    const origin = `${u.protocol}//${u.host}`;
    const id = `preconnect-${u.host}`;
    if (document.getElementById(id)) return;
    const link = document.createElement("link");
    link.id = id;
    link.rel = "preconnect";
    link.href = origin;
    link.crossOrigin = "";
    document.head.appendChild(link);
  } catch {}
}

export default function OptimizedCardImage({
  src,
  alt = "",
  className = "",
  aspectW = 16,
  aspectH = 9,
  eager = false,       // ‚Üê –∫–∞–∫ –∏ –±—ã–ª–æ
  hideOnError = true,  // ‚Üê –ù–û–í–û–ï: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π <img> –ø—Ä–∏ –æ—à–∏–±–∫–µ (—É–±–∏—Ä–∞–µ—Ç ¬´–∞–ª—å—Ç-—Ñ–ª–∏–∫–µ—Ä¬ª)
}) {
  const [mode, setMode] = useState("thumb"); // "thumb" | "original" | "placeholder"
  const [loaded, setLoaded] = useState(false);
  const timerRef = useRef(null);
  const imgRef = useRef(null);               // ‚Üê –¥–µ—Ä–∂–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π <img>

  const base = useMemo(() => {
    if (!src) return null;
    const h = (w) => Math.max(1, Math.round((w * aspectH) / aspectW));
    const t320 = thumbUrl(src, { w: 320, h: h(320) });
    const t480 = thumbUrl(src, { w: 480, h: h(480) });
    const t640 = thumbUrl(src, { w: 640, h: h(640) });
    ensurePreconnect(t480);
    return { 320: t320, 480: t480, 640: t640 };
  }, [src, aspectW, aspectH]);

  const srcSet =
    mode === "thumb" && base
      ? `${base[320]} 320w, ${base[480]} 480w, ${base[640]} 640w`
      : undefined;

  const loadingAttr = eager ? "eager" : "lazy";
  const fetchPriority = eager ? "high" : "low";
  const switchTimeout = eager ? EAGER_TIMEOUT : DEFAULT_TIMEOUT;

  const style = {
    aspectRatio: `${aspectW} / ${aspectH}`,
    width: "100%",
    height: "auto",
    display: "block",
    background: loaded ? "transparent" : "#0b0d11",
    borderRadius: 12,
  };

  useEffect(() => {
    setLoaded(false);
    if (!src) {
      setMode("placeholder");
      return;
    }
    setMode("thumb");
    if (timerRef.current) clearTimeout(timerRef.current);
    timerRef.current = setTimeout(() => {
      setMode((m) => (m === "thumb" ? "original" : m));
    }, switchTimeout);
    return () => {
      if (timerRef.current) clearTimeout(timerRef.current);
    };
  }, [src, switchTimeout]);

  const handleLoad = useCallback(() => {
    setLoaded(true);
    if (timerRef.current) clearTimeout(timerRef.current);
  }, []);

  const handleError = useCallback(
    (e) => {
      // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π <img>, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–±–∏—Ç–æ–π –∏–∫–æ–Ω–∫–∏¬ª –∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è alt-—Ç–µ–∫—Å—Ç–∞.
      if (hideOnError && e?.currentTarget) {
        try {
          e.currentTarget.style.display = "none";
        } catch {}
      }
      if (timerRef.current) clearTimeout(timerRef.current);
      setLoaded(false);
      setMode((m) => (m === "thumb" ? "original" : "placeholder"));
    },
    [hideOnError]
  );

  if (!src || mode === "placeholder") {
    // –î–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ alt –Ω–µ –Ω—É–∂–µ–Ω ‚Äî —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return (
      <img
        className={className}
        src={PLACEHOLDER}
        alt=""
        style={style}
        loading="lazy"
        decoding="async"
        fetchpriority="low"
        aria-hidden="true"
      />
    );
  }

  if (mode === "original") {
    return (
      <img
        ref={imgRef}
        className={className}
        src={src}
        alt={alt}
        style={style}
        loading={loadingAttr}
        decoding="async"
        fetchpriority={fetchPriority}
        onLoad={handleLoad}
        onError={handleError}
      />
    );
  }

  // mode === "thumb"
  return (
    <img
      ref={imgRef}
      className={className}
      src={base ? base[480] : src}
      srcSet={srcSet}
      sizes="(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 33vw"
      alt={alt}
      loading={loadingAttr}
      decoding="async"
      fetchpriority={fetchPriority}
      onLoad={handleLoad}
      onError={handleError}
      style={style}
    />
  );
}
