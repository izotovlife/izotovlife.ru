// –ü—É—Ç—å: frontend/src/components/WeatherWidget.js
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–∏–¥–∂–µ—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è —à–∞–ø–∫–∏ —Å–∞–π—Ç–∞ IzotovLife.
// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
//   ‚úÖ –ü–æ–≥–æ–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å—Ç—å placeholder).
//   ‚úÖ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Navbar).
//   ‚úÖ –ò–∫–æ–Ω–∫–∏ üåç –∏ ‚ü≥ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –¥–≤–∏–≥–∞—é—Ç —Å—Ç—Ä–æ–∫—É.
//   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É (–Ω–µ —Å—Ö–ª–æ–ø—ã–≤–∞–µ—Ç—Å—è).
//   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–∞ –∏–∑ Navbar.css.

import React, { useEffect, useRef, useState } from "react";
import "./WeatherWidget.css";

const weatherNames = {
  0: "–Ø—Å–Ω–æ ‚òÄÔ∏è",
  1: "–ü—Ä–µ–∏–º. —è—Å–Ω–æ üå§",
  2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ",
  3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è",
  45: "–¢—É–º–∞–Ω üå´Ô∏è",
  48: "–ò–∑–º–æ—Ä–æ—Å—å üå´Ô∏è",
  51: "–ú–æ—Ä–æ—Å—å üå¶Ô∏è",
  61: "–î–æ–∂–¥—å üåßÔ∏è",
  63: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è",
  71: "–°–Ω–µ–≥ üå®Ô∏è",
  75: "–°–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è",
  80: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üå¶Ô∏è",
  81: "–õ–∏–≤–Ω–∏ ‚õàÔ∏è",
  95: "–ì—Ä–æ–∑–∞ ‚ö°",
  99: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
};

export default function WeatherWidget() {
  const [city, setCity] = useState(localStorage.getItem("weatherCity") || "");
  const [suggestions, setSuggestions] = useState([]);
  const [weather, setWeather] = useState(null);
  const [fade, setFade] = useState(false);
  const [loading, setLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [manualMode, setManualMode] = useState(false);
  const timerRef = useRef(null);
  const refreshTimerRef = useRef(null);

  // --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
  useEffect(() => {
    if (!city && "geolocation" in navigator) {
      setLoading(true);
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const { latitude, longitude } = pos.coords;
          fetchWeatherByCoords(latitude, longitude, "–í–∞—à –≥–æ—Ä–æ–¥");
        },
        () => fetchWeatherByCity("–ú–æ—Å–∫–≤–∞"),
        { enableHighAccuracy: true, timeout: 5000 }
      );
    } else if (city) {
      fetchWeatherByCity(city);
    } else {
      fetchWeatherByCity("–ú–æ—Å–∫–≤–∞");
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // --- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ ---
  useEffect(() => {
    if (!manualMode || !city || city.length < 2) {
      setSuggestions([]);
      return;
    }
    clearTimeout(timerRef.current);
    timerRef.current = setTimeout(async () => {
      try {
        const res = await fetch(
          `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(
            city
          )}&count=5&language=ru`
        );
        const data = await res.json();
        setSuggestions(data.results || []);
      } catch {}
    }, 300);
    return () => clearTimeout(timerRef.current);
  }, [city, manualMode]);

  // --- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç ---
  useEffect(() => {
    if (!city) return;
    if (refreshTimerRef.current) clearInterval(refreshTimerRef.current);
    refreshTimerRef.current = setInterval(() => {
      fetchWeatherByCity(city);
    }, 15 * 60 * 1000);
    return () => clearInterval(refreshTimerRef.current);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [city]);

  // --- –ü–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ---
  async function fetchWeatherByCoords(lat, lon, name) {
    try {
      setLoading(true);
      const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,weathercode,surface_pressure&timezone=auto`;
      const resp = await fetch(url);
      const data = await resp.json();
      const cur = data.current;
      if (!cur) return;
      const desc = weatherNames[cur.weathercode] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

      setFade(false);
      setTimeout(() => {
        setWeather({
          area: name,
          temp: Math.round(cur.temperature_2m),
          desc,
          pressure: Math.round(cur.surface_pressure * 0.75006),
        });
        setFade(true);
        setLoading(false);
        setLastUpdated(new Date());
      }, 100);

      localStorage.setItem("weatherCity", name);
      setManualMode(false);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã:", e);
      setLoading(false);
    }
  }

  // --- –ü–æ–≥–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ ---
  async function fetchWeatherByCity(cityName) {
    try {
      setLoading(true);
      const res = await fetch(
        `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(
          cityName
        )}&count=1&language=ru`
      );
      const geo = await res.json();
      if (!geo.results || !geo.results[0]) {
        setLoading(false);
        return;
      }
      const { latitude, longitude, name } = geo.results[0];
      await fetchWeatherByCoords(latitude, longitude, name);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:", e);
      setLoading(false);
    }
  }

  const formatTime = (d) =>
    d ? d.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" }) : "";

  return (
    <div className="weather-widget">
      {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <button
        onClick={() => setManualMode((m) => !m)}
        title="–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é"
        style={{
          background: "none",
          border: "none",
          color: "white",
          cursor: "pointer",
          fontSize: 18,
        }}
      >
        üåç
      </button>

      <button
        onClick={() => fetchWeatherByCity(city || "–ú–æ—Å–∫–≤–∞")}
        title="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É"
        className={loading ? "rotate-icon" : ""}
        style={{
          background: "none",
          border: "none",
          color: "white",
          cursor: "pointer",
          fontSize: 16,
        }}
      >
        ‚ü≥
      </button>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –ø–æ–≥–æ–¥–æ–π (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω) */}
      <div className={`weather-fade ${fade ? "fade-in" : ""}`}>
        {weather ? (
          <>
            <span className="weather-city">
              <strong>{weather.area}</strong>:
            </span>
            <span className="weather-temp">{weather.temp}¬∞C</span>
            <span className="weather-desc">{weather.desc}</span>
            <span className="weather-pressure">
              –î–∞–≤–ª. {weather.pressure} –º–º —Ä—Ç. —Å—Ç.
            </span>
            {lastUpdated && (
              <span className="weather-time" style={{ fontSize: 12, color: "#bbb" }}>
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatTime(lastUpdated)}
              </span>
            )}
          </>
        ) : (
          <span style={{ color: "#bbb" }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã...</span>
        )}
      </div>

      {/* –ü–æ–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ */}
      {manualMode && (
        <div style={{ position: "relative", marginTop: 6 }}>
          <input
            value={city}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥..."
            onChange={(e) => setCity(e.target.value)}
            style={{
              background: "#111",
              color: "white",
              border: "1px solid #444",
              borderRadius: 6,
              padding: "4px 8px",
              width: 180,
            }}
            autoFocus
          />
          {suggestions.length > 0 && (
            <div
              style={{
                position: "absolute",
                top: "110%",
                left: 0,
                background: "#0f1115",
                border: "1px solid #333",
                borderRadius: 8,
                zIndex: 30,
                width: "100%",
                boxShadow: "0 4px 8px rgba(0,0,0,0.4)",
              }}
            >
              {suggestions.map((s) => (
                <div
                  key={s.id}
                  onClick={() => {
                    setCity(s.name);
                    fetchWeatherByCoords(s.latitude, s.longitude, s.name);
                    setSuggestions([]);
                  }}
                  style={{
                    padding: "6px 10px",
                    cursor: "pointer",
                    fontSize: 14,
                  }}
                  onMouseDown={(e) => e.preventDefault()}
                  onMouseOver={(e) =>
                    (e.currentTarget.style.background = "#1a1a1a")
                  }
                  onMouseOut={(e) =>
                    (e.currentTarget.style.background = "transparent")
                  }
                >
                  {s.name} {s.country ? `(${s.country})` : ""}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
