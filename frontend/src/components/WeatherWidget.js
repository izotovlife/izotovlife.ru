// –ü—É—Ç—å: frontend/src/components/WeatherWidget.js
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–∏–¥–∂–µ—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è —à–∞–ø–∫–∏ —Å–∞–π—Ç–∞ IzotovLife.
// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É—Å—Ç—Ä–∞–Ω—ë–Ω ESLint warning):
//   ‚úÖ loadByCity –æ–±—ë—Ä–Ω—É—Ç –≤ useCallback (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞).
//   ‚úÖ useEffect —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç [loadByCity, city] ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç.
//   ‚úÖ –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –∫—ç—à (30 –º–∏–Ω), –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ñ–æ–ª–±—ç–∫–∏.
//   ‚ùó –ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª; –∑–∞–º–µ–Ω–∏–ª –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –Ω–∞ –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª —Ö—É–∫–æ–≤.

import React, { useEffect, useRef, useState, useCallback } from "react";
import "./WeatherWidget.css";

/* ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---------- */

const ENV_CITY = (process.env.REACT_APP_WEATHER_CITY || "").trim();
const DEFAULT_CITY = ENV_CITY || "–ú–æ—Å–∫–≤–∞";

const MOSCOW_COORDS = { lat: 55.7558, lon: 37.6173, name: "–ú–æ—Å–∫–≤–∞" };

const CACHE_KEY = "WEATHER_CACHE_V3";
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// –í –∫—ç—à–µ —Ö—Ä–∞–Ω–∏–º: { area, temp, desc, pressure, wind, fetchedAt }
function readCache() {
  try {
    const raw = localStorage.getItem(CACHE_KEY);
    if (!raw) return null;
    const obj = JSON.parse(raw);
    if (!obj?.fetchedAt) return null;
    return obj;
  } catch {
    return null;
  }
}
function writeCache(obj) {
  try {
    localStorage.setItem(CACHE_KEY, JSON.stringify(obj));
  } catch {}
}

// –ó–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
const BAD_NAMES = new Set([
  "–≤–∞—à –≥–æ—Ä–æ–¥",
  "your city",
  "–≥–æ—Ä–æ–¥",
  "undefined",
  "null",
  "none",
  "‚Äî",
  "-",
]);

function isInvalidCityName(x) {
  if (!x) return true;
  const s = String(x).trim().toLowerCase();
  if (!s) return true;
  if (BAD_NAMES.has(s)) return true;
  if (!/[a-z–∞-—è—ë]/i.test(s)) return true; // —Ç–æ–ª—å–∫–æ –Ω–µ–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (s.length < 2) return true;
  return false;
}

function sanitizeCityName(x) {
  if (isInvalidCityName(x)) return DEFAULT_CITY;
  return String(x).trim();
}

// –ö–∞—Ä—Ç–∞ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã
const weatherNames = {
  0: "–Ø—Å–Ω–æ ‚òÄÔ∏è",
  1: "–ü—Ä–µ–∏–º. —è—Å–Ω–æ üå§",
  2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ",
  3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è",
  45: "–¢—É–º–∞–Ω üå´Ô∏è",
  48: "–ò–∑–º–æ—Ä–æ—Å—å üå´Ô∏è",
  51: "–ú–æ—Ä–æ—Å—å üå¶Ô∏è",
  53: "–ú–æ—Ä–æ—Å—å üå¶Ô∏è",
  55: "–ú–æ—Ä–æ—Å—å üå¶Ô∏è",
  61: "–î–æ–∂–¥—å üåßÔ∏è",
  63: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è",
  65: "–õ–∏–≤–µ–Ω—å üåßÔ∏è",
  66: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å üåßÔ∏è",
  67: "–°–∏–ª—å–Ω—ã–π –ª–µ–¥. –¥–æ–∂–¥—å üåßÔ∏è",
  71: "–°–Ω–µ–≥ üå®Ô∏è",
  73: "–°–Ω–µ–≥ üå®Ô∏è",
  75: "–°–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è",
  80: "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üå¶Ô∏è",
  81: "–õ–∏–≤–Ω–∏ ‚õàÔ∏è",
  82: "–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏ ‚õàÔ∏è",
  85: "–°–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è",
  86: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è",
  95: "–ì—Ä–æ–∑–∞ ‚ö°",
  96: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
  99: "–ì—Ä–æ–∑–∞ —Å –∫—Ä—É–ø–Ω—ã–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
};

/* ---------- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ---------- */

export default function WeatherWidget() {
  // –ë–µ—Ä—ë–º –≥–æ—Ä–æ–¥ –∏–∑ localStorage, –Ω–æ —Å—Ä–∞–∑—É —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º
  const storedCity = sanitizeCityName(localStorage.getItem("weatherCity"));
  const [city, setCity] = useState(storedCity);
  const [suggestions, setSuggestions] = useState([]);
  const [weather, setWeather] = useState(null);
  const [fade, setFade] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(""); // —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
  const [manualMode, setManualMode] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);

  const debounceRef = useRef(null);
  const refreshTimerRef = useRef(null);
  const abortRef = useRef(null);

  /* ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ---------- */

  const geocodeCity = useCallback(async (cityName, signal) => {
    const q = sanitizeCityName(cityName);
    try {
      const res = await fetch(
        `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(
          q
        )}&count=1&language=ru`,
        { signal }
      );
      if (!res.ok) return null;
      const geo = await res.json();
      const first = geo?.results?.[0];
      if (!first?.latitude || !first?.longitude) return null;
      return {
        lat: Number(first.latitude),
        lon: Number(first.longitude),
        name: first.name || q,
      };
    } catch {
      return null;
    }
  }, []);

  const fetchWeatherByCoords = useCallback(async (lat, lon, placeName, signal) => {
    const u =
      `https://api.open-meteo.com/v1/forecast` +
      `?latitude=${lat}&longitude=${lon}` +
      `&current_weather=true&hourly=pressure_msl&windspeed_unit=ms` +
      `&timezone=auto`;

    const r = await fetch(u, { signal });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const data = await r.json();

    const cw = data?.current_weather;
    if (!cw || typeof cw.temperature !== "number") {
      throw new Error("–ù–µ—Ç current_weather");
    }

    // –î–∞–≤–ª–µ–Ω–∏–µ –∏–∑ hourly (–≥–ü–∞ ‚Üí –º–º —Ä—Ç. —Å—Ç.)
    let pressureMm = null;
    const hTimes = data?.hourly?.time || [];
    const hPress = data?.hourly?.pressure_msl || [];
    if (hTimes.length && hPress.length) {
      const nowIso = cw?.time || new Date().toISOString().slice(0, 13) + ":00";
      let idx = hTimes.indexOf(nowIso);
      if (idx < 0) {
        const now = new Date(nowIso).getTime();
        let best = 0,
          bestDiff = Infinity;
        for (let i = 0; i < hTimes.length; i++) {
          const diff = Math.abs(new Date(hTimes[i]).getTime() - now);
          if (diff < bestDiff) {
            bestDiff = diff;
            best = i;
          }
        }
        idx = best;
      }
      const hPa = Number(hPress[idx]);
      if (Number.isFinite(hPa)) pressureMm = Math.round(hPa * 0.75006);
    }

    const desc = weatherNames[Number(cw.weathercode)] || "–ü–æ–≥–æ–¥–∞";
    return {
      area: placeName,
      temp: Math.round(Number(cw.temperature)),
      desc,
      pressure: pressureMm,
      wind: Math.round(Number(cw.windspeed || 0)),
      fetchedAt: Date.now(),
    };
  }, []);

  /* ---------- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (useCallback) ---------- */

  const loadByCity = useCallback(
    async (cityName, opts = {}) => {
      const { preferCacheFirst = false } = opts;

      // –ü–æ–∫–∞–∑–∞—Ç—å –∫—ç—à —Å—Ä–∞–∑—É ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ—Ç—ã
      if (preferCacheFirst) {
        const cached = readCache();
        if (cached) {
          const stale = Date.now() - cached.fetchedAt > CACHE_TTL;
          setWeather({ ...cached, stale });
          setFade(true);
        }
      }

      if (abortRef.current) abortRef.current.abort();
      const controller = new AbortController();
      abortRef.current = controller;

      setLoading(true);
      setError("");

      // –®–∞–≥ 1. –ü—Ä–æ–±—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ç—å ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª (–Ω–æ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
      let target = await geocodeCity(cityName, controller.signal);

      // –®–∞–≥ 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º DEFAULT_CITY
      if (!target && sanitizeCityName(cityName) !== DEFAULT_CITY) {
        target = await geocodeCity(DEFAULT_CITY, controller.signal);
        // –ó–∞–æ–¥–Ω–æ –ø–æ–ø—Ä–∞–≤–∏–º localStorage, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–µ –ø–∞–¥–∞—Ç—å
        localStorage.setItem("weatherCity", DEFAULT_CITY);
        setCity(DEFAULT_CITY);
      }

      // –®–∞–≥ 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Ñ–æ–ª–±—ç–∫ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
      if (!target) {
        target = { ...MOSCOW_COORDS };
        localStorage.setItem("weatherCity", MOSCOW_COORDS.name);
        setCity(MOSCOW_COORDS.name);
      }

      try {
        const payload = await fetchWeatherByCoords(
          target.lat || MOSCOW_COORDS.lat,
          target.lon || MOSCOW_COORDS.lon,
          target.name || MOSCOW_COORDS.name,
          controller.signal
        );

        writeCache(payload);
        setFade(false);
        setTimeout(() => {
          setWeather({ ...payload, stale: false });
          setFade(true);
          setLoading(false);
          setError("");
          setLastUpdated(new Date());
          localStorage.setItem("weatherCity", payload.area);
          setManualMode(false);
        }, 80);
      } catch (e) {
        console.error("–ü–æ–≥–æ–¥–∞ (fetch):", e);
        const cached = readCache();
        if (cached) setWeather({ ...cached, stale: true });
        setLoading(false);
        setError("–ù–µ—Ç —Å–≤—è–∑–∏ ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å");
      }
    },
    [geocodeCity, fetchWeatherByCoords]
  );

  /* ---------- –•—É–∫–∏ ---------- */

  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç—è–Ω–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    loadByCity(city, { preferCacheFirst: true });
    return () => {
      if (abortRef.current) abortRef.current.abort();
      if (refreshTimerRef.current) clearInterval(refreshTimerRef.current);
    };
  }, [loadByCity, city]);

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≥–æ—Ä–æ–¥–∞
  useEffect(() => {
    if (!manualMode || !city || city.length < 2) {
      setSuggestions([]);
      return;
    }
    clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        const res = await fetch(
          `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(
            city
          )}&count=5&language=ru`
        );
        const data = await res.json();
        setSuggestions(data?.results || []);
      } catch {
        setSuggestions([]);
      }
    }, 300);
    return () => clearTimeout(debounceRef.current);
  }, [city, manualMode]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  useEffect(() => {
    if (!city) return;
    if (refreshTimerRef.current) clearInterval(refreshTimerRef.current);
    refreshTimerRef.current = setInterval(() => {
      loadByCity(city);
    }, 15 * 60 * 1000);
    return () => clearInterval(refreshTimerRef.current);
  }, [city, loadByCity]);

  /* ---------- –†–µ–Ω–¥–µ—Ä ---------- */

  const formatTime = (d) =>
    d ? d.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" }) : "";

  return (
    <div className="weather-widget">
      {/* –ö–Ω–æ–ø–∫–∏ */}
      <button
        onClick={() => setManualMode((m) => !m)}
        title="–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é"
        className="weather-btn"
        aria-label="–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥"
      >
        üåç
      </button>

      <button
        onClick={() => loadByCity(city || DEFAULT_CITY)}
        title="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É"
        className={`weather-btn ${loading ? "rotate-icon" : ""}`}
        aria-label="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É"
      >
        ‚ü≥
      </button>

      {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–≥–æ–¥—ã */}
      <div className={`weather-fade ${fade ? "fade-in" : ""}`}>
        {weather ? (
          <>
            <span className="weather-city">
              <strong>{weather.area}</strong>:
            </span>
            <span className="weather-temp">{weather.temp}¬∞C</span>
            <span className="weather-desc">
              {weather.desc} {weather.stale ? "(–∫—ç—à)" : ""}
            </span>
            {typeof weather.pressure === "number" && (
              <span className="weather-pressure">
                –î–∞–≤–ª. {weather.pressure} –º–º —Ä—Ç. —Å—Ç.
              </span>
            )}
            {typeof weather.wind === "number" && weather.wind > 0 && (
              <span className="weather-wind">–í–µ—Ç–µ—Ä {weather.wind} –º/—Å</span>
            )}
            {lastUpdated && !weather.stale && (
              <span className="weather-time" aria-live="polite">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatTime(lastUpdated)}
              </span>
            )}
          </>
        ) : error ? (
          <button
            className="weather-error-btn"
            onClick={() => loadByCity(city || DEFAULT_CITY)}
            title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã"
          >
            {error}
          </button>
        ) : (
          <span className="weather-placeholder">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã‚Ä¶</span>
        )}
      </div>

      {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ */}
      {manualMode && (
        <div className="weather-manual">
          <input
            value={city}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥..."
            onChange={(e) => setCity(e.target.value)}
            className="weather-input"
            autoFocus
          />
          {suggestions.length > 0 && (
            <div className="weather-suggest">
              {suggestions.map((s) => (
                <div
                  key={s.id}
                  onClick={() => {
                    setCity(s.name);
                    loadByCity(s.name);
                    setSuggestions([]);
                  }}
                  className="weather-suggest-item"
                  onMouseDown={(e) => e.preventDefault()}
                >
                  {s.name} {s.country ? `(${s.country})` : ""}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
