// frontend/src/components/HeaderInfo.js
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ë–ª–æ–∫ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏ –ø–æ–≥–æ–¥–æ–π –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä—É—á–Ω—É—é –≥–æ—Ä–æ–¥—É.
// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
//   - –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.
//   - –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage.
//   - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.
// –ü—É—Ç—å: frontend/src/components/HeaderInfo.js

import React, { useEffect, useState } from "react";

export default function HeaderInfo() {
  const [rates, setRates] = useState({});
  const [selectedCurrency, setSelectedCurrency] = useState("USD");

  const [weather, setWeather] = useState(null);
  const [selectedCity, setSelectedCity] = useState(
    localStorage.getItem("selectedCity") || ""
  );

  const cities = [
    { name: "–ú–æ—Å–∫–≤–∞", lat: 55.7558, lon: 37.6176 },
    { name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", lat: 59.9343, lon: 30.3351 },
    { name: "–ö–∞–∑–∞–Ω—å", lat: 55.7963, lon: 49.1088 },
    { name: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", lat: 55.0084, lon: 82.9357 },
    { name: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", lat: 56.8389, lon: 60.6057 },
  ];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
  useEffect(() => {
    async function fetchRates() {
      try {
        const res = await fetch("https://api.exchangerate.host/latest?base=RUB");
        const data = await res.json();
        setRates(data.rates);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:", err);
      }
    }
    fetchRates();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã
  async function loadWeather(lat, lon, cityName = "") {
    try {
      const API_KEY = "YOUR_OPENWEATHERMAP_API_KEY"; // üîë –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á
      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
      const res = await fetch(url);
      const data = await res.json();
      setWeather({
        temp: data.main.temp,
        pressure: data.main.pressure,
        city: cityName || data.name,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:", err);
    }
  }

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é
  useEffect(() => {
    if (selectedCity) {
      const cityObj = cities.find((c) => c.name === selectedCity);
      if (cityObj) {
        loadWeather(cityObj.lat, cityObj.lon, cityObj.name);
      }
    } else {
      // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
          (pos) => {
            loadWeather(pos.coords.latitude, pos.coords.longitude);
          },
          (err) => {
            console.warn("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:", err);
          }
        );
      }
    }
  }, [selectedCity]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  const handleCityChange = (e) => {
    const city = e.target.value;
    setSelectedCity(city);
    localStorage.setItem("selectedCity", city);
  };

  return (
    <div className="flex items-center gap-6 text-sm text-gray-200 px-4 py-2 bg-[#111827]">
      {/* –í–∞–ª—é—Ç—ã */}
      <div className="flex items-center gap-2">
        <span>–ö—É—Ä—Å:</span>
        <span>USD: {rates["USD"] ? (1 / rates["USD"]).toFixed(2) : "..."}</span>
        <span>EUR: {rates["EUR"] ? (1 / rates["EUR"]).toFixed(2) : "..."}</span>
        <select
          value={selectedCurrency}
          onChange={(e) => setSelectedCurrency(e.target.value)}
          className="bg-[#0b132b] text-white rounded px-1 py-0.5 ml-2"
        >
          {Object.keys(rates).map((cur) => (
            <option key={cur} value={cur}>
              {cur}
            </option>
          ))}
        </select>
        {selectedCurrency !== "USD" && selectedCurrency !== "EUR" && (
          <span>
            {selectedCurrency}:{" "}
            {rates[selectedCurrency]
              ? (1 / rates[selectedCurrency]).toFixed(2)
              : "..."}
          </span>
        )}
      </div>

      {/* –ü–æ–≥–æ–¥–∞ */}
      <div className="flex items-center gap-2">
        <select
          value={selectedCity}
          onChange={handleCityChange}
          className="bg-[#0b132b] text-white rounded px-1 py-0.5"
        >
          <option value="">–ú–æ–π –≥–æ—Ä–æ–¥ (–∞–≤—Ç–æ)</option>
          {cities.map((c) => (
            <option key={c.name} value={c.name}>
              {c.name}
            </option>
          ))}
        </select>
        {weather && (
          <div>
            {weather.city}: {weather.temp.toFixed(1)}¬∞C, –î–∞–≤–ª. {weather.pressure} –º–º —Ä—Ç. —Å—Ç.
          </div>
        )}
      </div>
    </div>
  );
}
