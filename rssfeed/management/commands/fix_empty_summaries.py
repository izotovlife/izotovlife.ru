# backend/rssfeed/management/commands/fix_empty_summaries.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö summary —É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
# –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
#   - requests —Å —Ç–∞–π–º–∞—É—Ç–æ–º (3 —Å–µ–∫ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, 5 —Å–µ–∫ –Ω–∞ —á—Ç–µ–Ω–∏–µ)
#   - —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 –ö–ë
#   - feedparser –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ ThreadPoolExecutor —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
#   - –∞—Ä–≥—É–º–µ–Ω—Ç—ã --limit –∏ --dry-run
#   - –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –Ω–æ–≤–æ—Å—Ç–µ–π
# –ü—É—Ç—å: backend/rssfeed/management/commands/fix_empty_summaries.py

import re
import html
import requests
import feedparser
import concurrent.futures
from django.core.management.base import BaseCommand
from django.db.models import Q
from news.models import ImportedNews


def clean_html(raw_html: str) -> str:
    """–£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (&amp; ‚Üí &)."""
    text = re.sub(r"<.*?>", "", raw_html or "").strip()
    return html.unescape(text)


def make_summary_from_text(title: str, description: str = "", content: str = "") -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ–º fallback-—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ summary –ø—É—Å—Ç–æ–µ."""
    base = clean_html(title) + ". "
    if description:
        base += clean_html(description)
    if content:
        base += " " + clean_html(content)
    base = re.sub(r"\s+", " ", base).strip()
    return (base[:200] + "...") if len(base) > 200 else base


def safe_parse(content: bytes, timeout: int = 5):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ feedparser.parse —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
        future = executor.submit(feedparser.parse, content)
        try:
            return future.result(timeout=timeout)
        except concurrent.futures.TimeoutError:
            return None


class Command(BaseCommand):
    help = "–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ summary —É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"

    def add_arguments(self, parser):
        parser.add_argument(
            "--limit",
            type=int,
            default=None,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)",
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ summary –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        )

    def handle(self, *args, **options):
        limit = options.get("limit")
        dry_run = options.get("dry_run")

        qs = ImportedNews.objects.filter(Q(summary__isnull=True) | Q(summary__exact=""))
        total = qs.count()

        if not total:
            self.stdout.write(self.style.SUCCESS("‚úÖ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø—É—Å—Ç—ã–º summary."))
            return

        if limit:
            qs = qs[:limit]
            self.stdout.write(self.style.WARNING(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ {limit} –Ω–æ–≤–æ—Å—Ç—è–º–∏."))

        self.stdout.write(self.style.WARNING(f"–ù–∞–π–¥–µ–Ω–æ {total} –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø—É—Å—Ç—ã–º summary. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É..."))

        updated = 0
        processed = 0

        for news in qs.iterator():
            processed += 1
            try:
                summary = ""

                if news.feed_url:
                    try:
                        resp = requests.get(news.feed_url, timeout=(3, 5), stream=True)
                        resp.raise_for_status()
                        # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 –ö–ë
                        content = resp.raw.read(200_000, decode_content=True)
                        feed = safe_parse(content, timeout=5)
                    except Exception as e:
                        self.stderr.write(self.style.WARNING(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RSS {news.feed_url}: {e}"))
                        feed = None

                    if feed:
                        found_entry = None
                        for entry in feed.entries:
                            if entry.get("link") == news.link:
                                found_entry = entry
                                break

                        if found_entry:
                            summary = (
                                found_entry.get("summary")
                                or found_entry.get("description")
                                or (
                                    found_entry.get("content")[0].get("value")
                                    if found_entry.get("content") else ""
                                )
                            )
                            summary = clean_html(summary)

                            if not summary:
                                summary = make_summary_from_text(
                                    news.title,
                                    found_entry.get("description", ""),
                                    found_entry.get("content")[0].get("value") if found_entry.get("content") else ""
                                )

                # fallback –±–µ–∑ RSS –∏–ª–∏ –Ω–µ—É–¥–∞—á–∏
                if not summary:
                    summary = make_summary_from_text(news.title)

                if dry_run:
                    self.stdout.write(f"üëâ [dry-run] {news.id}: {summary[:80]}...")
                else:
                    news.summary = summary
                    news.save(update_fields=["summary"])
                    updated += 1

            except Exception as e:
                self.stderr.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {news.id}: {e}"))

            # –∫–∞–∂–¥—ã–µ 50 –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if processed % 50 == 0:
                self.stdout.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{limit or total}...")

        if dry_run:
            self.stdout.write(self.style.SUCCESS(f"‚úÖ Dry-run –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {limit or total} –Ω–æ–≤–æ—Å—Ç–µ–π."))
        else:
            self.stdout.write(self.style.SUCCESS(f"–ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {updated} –∏–∑ {limit or total} –Ω–æ–≤–æ—Å—Ç–µ–π."))
